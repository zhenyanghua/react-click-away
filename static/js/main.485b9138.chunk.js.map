{"version":3,"sources":["../../src/index.tsx","App.js","index.js"],"names":["rest","el","React","isTouch","handle","e","onClickOutside","document","ref","App","useState","clicked","setClicked","ReactDOM","render","getElementById"],"mappings":"2MAckD,SAAC,GAAD,IAAC,EAAD,EAAC,iBAAD,EAAC,SAG9CA,EAH6C,6CAK1CC,EAAKC,WAAX,MACIC,GAAJ,EAEMC,EAAUC,YACd,aAAIA,SACFF,MAGEE,kBAAJ,GAIIJ,YAAeA,mBAAoBI,EAAvC,SACEC,MAcJ,OAVAJ,eAAgB,WAId,OAHAK,2CACAA,wCAEO,WACLA,8CACAA,8CANJL,IAWE,yCAASF,GAAMQ,IAAKP,IADtB,ICxBaQ,EAlBH,WAAO,IAAD,EACcP,IAAMQ,UAAS,GAD7B,mBACTC,EADS,KACAC,EADA,KAOhB,OACE,6BACE,kBAAC,EAAD,CAAcN,eANS,WACzBM,GAAW,SAAAD,GAAO,OAAKA,OAMnB,oEAEDA,GAAW,yDCVlBE,IAASC,OAAO,kBAAC,EAAD,MAASP,SAASQ,eAAe,U","file":"static/js/main.485b9138.chunk.js","sourcesContent":["import React from 'react'\n\nexport interface ClickOutsideProps {\n  /**\n   * Callback once click outside event is detected.\n   * @param e `Event`\n   */\n  onClickOutside: (e: Event) => any\n}\n\n/**\n * Use this component to wrap other components to detect if it is clicked\n * outside of the wrapped container.\n */\nconst ClickOutside: React.FC<ClickOutsideProps> = ({\n  onClickOutside,\n  children,\n  ...rest\n}) => {\n  const el = React.useRef<HTMLDivElement>(null)\n  let isTouch = false\n\n  const handle = (e: Event) => {\n    if (e.type === 'touchend') {\n      isTouch = true\n    }\n\n    if (e.type === 'click' && isTouch) {\n      return\n    }\n\n    if (el.current && !el.current.contains(e.target as Node)) {\n      onClickOutside(e)\n    }\n  }\n\n  React.useEffect(() => {\n    document.addEventListener('touchend', handle, true)\n    document.addEventListener('click', handle, true)\n\n    return () => {\n      document.removeEventListener('touchend', handle, true)\n      document.removeEventListener('click', handle, true)\n    }\n  }, [])\n\n  return (\n    <div {...rest} ref={el}>\n      {children}\n    </div>\n  )\n}\n\nexport default ClickOutside\n","import React from 'react'\n\nimport ClickOutside from 'react-click-away'\n\nconst App = () => {\n  const [clicked, setClicked] = React.useState(false);\n\n  const handleClickOutside = () => {\n    setClicked(clicked => !clicked);\n  }\n\n  return (\n    <div>\n      <ClickOutside onClickOutside={handleClickOutside}>\n        <h1>Click Outside of this Box to Toggle</h1>\n      </ClickOutside>\n      {clicked && <h1>Clicked Outside Toggled</h1>}\n    </div>\n\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}